{"version":3,"sources":["pages/dashboard/account/home/sections/tag_field.js"],"names":["TagField","props","useState","section","setSection","newValue","setNewValue","TagListController","tagList","setTagList","FieldsOfInterestListController","fieldList","setFieldList","CreateModuleController","academy","setAcademy","loading","setLoading","currentField","setCurrentField","currentArgument","setCurrentArgument","tagPerField","setTagPerField","tagPerArgument","setTagPerArgument","confirm","undefined","refute","confirmInfo","setConfirmInfo","navigate","useNavigate","user","routes","useEffect","getTagPerField","getTagPerArgument","setState","canI","loadTags","loadFields","loadArguments","home","path","className","style","fontWeight","value","onChange","e","scrollButtons","label","md","includes","placeholder","target","onKeyDown","key","create","createItem","getList","map","tag","getName","onDelete","delete","getId","getFieldOfInterest","field","length","variant","onClick","primary","renderValue","selected","item","join","multiple","link","linkFieldToTag","index","indexOf","id","splice","unlinkFieldToTag","checked","Object","values","getArguments","getChoices","arg","slug","title","linkTagToArg","unlinkTagToArg","action","closeFunction"],"mappings":"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","file":"static/js/13.9f1bfaa1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Checkbox, Chip, Tab, Tabs } from '@material-ui/core'\nimport { TextField } from '@material-ui/core'\nimport { Col, Row } from 'react-bootstrap'\nimport TagListController from '../../../../../controllers/tags_list'\nimport FieldsOfInterestListController from '../../../../../controllers/field_of_interest_list_controller'\nimport { Select, MenuItem } from '@material-ui/core'\nimport { Autocomplete } from '@mui/material'\nimport CreateModuleController from '../../../../../controllers/create_module_controller'\nimport { ListItemText } from '@material-ui/core'\nimport ConfirmAction from \"../../../../../components/confirm_action\"\nimport { useNavigate } from \"react-router\";\n\n\nfunction TagField(props) {\n  const [section, setSection] = useState(1)\n  const [newValue, setNewValue] = useState(\"\")\n  const [tagList, setTagList] = useState(new TagListController())\n  const [fieldList, setFieldList] = useState(new FieldsOfInterestListController())\n  const [academy, setAcademy] = useState(new CreateModuleController())\n  const [loading, setLoading] = useState(true)\n\n  const [currentField, setCurrentField] = useState(\"\")\n  const [currentArgument, setCurrentArgument] = useState(\"\")\n  const [tagPerField, setTagPerField] = useState([])\n  const [tagPerArgument, setTagPerArgument] = useState([])\n  const [confirmInfo, setConfirmInfo] = useState({confirm: undefined, refute: undefined})\n\n  let navigate = useNavigate()\n\n  let user = props.user\n  let routes = props.routes\n  \n  function linkFieldToTag(tag, link) {\n    if(currentField != \"\") {\n      if(link) {\n        setTagPerField([...tagPerField, tag])\n        tag.linkFieldToTag(currentField)\n      }\n      else {\n        let index = tagPerField.map(item => item.getId()).indexOf(tag.id)\n        if(index >= 0) {\n          tagPerField.splice(index, 1)\n          setTagPerField([...tagPerField])\n        }\n        tag.unlinkFieldToTag(currentField)\n      }\n    }\n  }\n\n  function linkTagToArg(tag, link) {\n    if(currentArgument != \"\") {\n      if(link) {\n        setTagPerArgument([...tagPerArgument, tag])\n        tag.linkTagToArg(currentArgument)\n      }\n      else {\n        let index = tagPerArgument.map(item => item.getId()).indexOf(tag.id)\n        if(index >= 0) {\n          tagPerArgument.splice(index, 1)\n          setTagPerArgument([...tagPerArgument])\n        }\n        tag.unlinkTagToArg(currentArgument)\n      }\n    }\n  }\n\n  function createItem(e) {\n    if(e.key == \"Enter\") {\n      if(section == 1) tagList.create(newValue)\n      else if(section == 2) fieldList.create(newValue)\n      setNewValue(\"\")\n    }\n  }\n\n  useEffect(() => {\n    if(currentField != \"\") setTagPerField( fieldList.getTagPerField(currentField))\n  }, [currentField])\n\n  useEffect( () => {\n    if(currentArgument != \"\") setTagPerArgument( tagList.getTagPerArgument(currentArgument))\n  }, [currentArgument])\n\n  useEffect( () => {\n    tagList.setState(setTagList)\n    fieldList.setState(setFieldList)\n    academy.setState(setAcademy)\n    if(user && user.canI(\"create_tag\")) {\n      tagList.loadTags()\n      fieldList.loadFields()\n      academy.loadArguments()\n    }\n    setLoading(false)\n  }, [])\n\n  useEffect(() => {\n    if(user) {\n      if(!user.canI(\"create_tag\")) navigate(routes.home.path)\n    }\n  }, [user])\n  \n\n  return (\n    <div className=\"tag_field\"> \n      <h1>Tag & Field</h1>\n      <p style={{ fontWeight: 200 }}>Creazione dei campi di interesse e dei tag.</p>\n      <Tabs value={section} onChange={(e, newValue) => setSection(newValue)} scrollButtons=\"auto\">\n        <Tab label=\"Tag\" value={1}/>\n        <Tab label=\"Campi d'interesse\" value={2} />\n        <Tab label=\"Link\" value={3} />\n      </Tabs>\n      <Row className=\"content\">\n        <Col  className=\"mx-auto\">\n          <Col md=\"6\" className=\"mx-auto\">\n          {\n            [1,2].includes(section) ? \n              <input\n                className=\"input\"\n                placeholder=\"Nuovo tag\"\n                value={newValue}\n                onChange={(e) => setNewValue(e.target.value)}\n                onKeyDown={(e) => createItem(e)}/>\n              : \"\"\n          }\n          </Col>\n          <div>\n            {\n              section == 1 ?\n                tagList.getList().map(tag => (\n                  <Chip className=\"my_chip\" label={tag.getName()} onDelete={() => setConfirmInfo({confirm: () => tagList.delete(tag.getId()), refute: undefined})}/>\n                )) :\n              section == 2 ?\n                fieldList.getFieldOfInterest().map(field => (\n                  <Chip className=\"my_chip\" label={field.getName()} onDelete={() => setConfirmInfo({confirm: () => fieldList.delete(field.getId()), refute: undefined}) }/>\n                ))  :\n                \"\"\n            }\n            <br/>\n            {\n              !loading ?\n                section == 1 ?\n                  tagList.getList().length == 0 ? \n                  <p className=\"text-center\">Non sono stati caricati tag</p> : \n                  \"\" :\n                section == 2 ?\n                  fieldList.getFieldOfInterest().length == 0 ? \n                  <p className=\"text-center\">Non sono stati caricati campi</p> : \n                  \"\" : \n                section == 3 ?\n                  <div>\n                    <h5>Link fra campi e tag</h5>\n                    <Row>\n                      <Col md=\"6\">\n                        <p className=\"m-0\">Campo</p>\n                        <Select value={currentField} variant=\"standard\" className=\"input\" label=\"Campo\">\n                          {\n                            fieldList.getFieldOfInterest().map(field => (\n                              <MenuItem key={field.getId()} value={field.getId()} onClick={() => setCurrentField(field.getId())}>\n                                <ListItemText primary={field.getName()} />\n                              </MenuItem>\n                            ))\n                          }\n                        </Select>\n                      </Col>\n                      <Col md=\"6\">\n                        <p className=\"m-0\">Tag</p>\n                        <Select renderValue={(selected) => selected.map(item => item.getName()).join(', ')} multiple value={tagPerField} variant=\"standard\" className=\"input\" label=\"Tag\">\n                          {\n                            tagList.getList().map(tag => (\n                              <MenuItem onClick={() => linkFieldToTag(tag, !tagPerField.map(item => item.getId()).includes(tag.getId()))}>\n                                <Checkbox className=\"orange_icon\" checked={tagPerField.map(item => item.getId()).includes(tag.getId())} />\n                                <ListItemText primary={tag.getName()} />\n                              </MenuItem>\n                            ))\n                          }\n                        </Select>\n                      </Col>\n                    </Row>\n                    <br/>\n                    <Row>\n                      <h5>Link fra academy e tag</h5>\n                      <Col md=\"6\">\n                        <p className=\"m-0\">Argomento</p>\n                        <Select value={currentArgument} variant=\"standard\" className=\"input\" label=\"Categoria\">\n                          {\n                            Object.values(academy.getArguments().getChoices()).map(arg => (\n                              <MenuItem key={arg.slug} value={arg.slug} onClick={() => setCurrentArgument(arg.slug)}>\n                                <ListItemText primary={arg.title} />\n                              </MenuItem>\n                            ))\n                          }\n                        </Select>\n                      </Col>\n                      <Col md=\"6\">\n                        <p className=\"m-0\">Tag</p>\n                        <Select renderValue={(selected) => selected.map(item => item.getName()).join(', ')} multiple value={tagPerArgument} variant=\"standard\" className=\"input\" label=\"Tag\">\n                          {\n                            tagList.getList().map(tag => (\n                              <MenuItem onClick={() => linkTagToArg(tag, !tagPerArgument.map(item => item.getId()).includes(tag.getId()))}>\n                                <Checkbox className=\"orange_icon\" checked={tagPerArgument.map(item => item.getId()).includes(tag.getId())} />\n                                <ListItemText primary={tag.getName()} />\n                              </MenuItem>\n                            ))\n                          }\n                        </Select>\n                      </Col>\n                    </Row>\n                  </div> :\n                  \"\" : \n                \"\"\n            }\n          </div>\n        </Col>\n      </Row>\n      <ConfirmAction action={confirmInfo} closeFunction={() => setConfirmInfo({confirm: undefined, refute: undefined})} />\n\n    </div>\n  )\n}\n\nexport default TagField"],"sourceRoot":""}